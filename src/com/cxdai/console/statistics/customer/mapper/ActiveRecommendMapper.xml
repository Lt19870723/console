<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cxdai.console.statistics.customer.mapper.ActiveRecommendMapper">
	   
	<resultMap id="invetedUserResultMap" type="com.cxdai.console.statistics.customer.vo.InvetedUserVo">
			<id property="id" column="id" />
			 <result column="USERID"  property="userId"  jdbcType="INTEGER" /> 
			 <result column="USERNAME"  property="userName"  jdbcType="VARCHAR"  /> 
			 <result column="INVITED_USERID"  property="invitedUserId"  jdbcType="INTEGER" /> 
			 <result column="INVITED_USERNAME"  property="invitedUsername"  jdbcType="VARCHAR" /> 
			 <result column="AWARDMONEY"  property="awardmoney"  jdbcType="DECIMAL" /> 
			 <result column="REGISTER_TIME"  property="registerTime"  jdbcType="TIMESTAMP"/> 
			 <result column="MOBILE_PASSED"  property="mobilePassed" jdbcType="INTEGER" /> 
			 <result column="EMAIL_PASSED"  property="emailPassed"  jdbcType="INTEGER"/> 
			 <result column="REALNAME_PASSED"  property="realnamePassed" jdbcType="INTEGER" /> 
			 <result column="VIP_PASSED"  property="vipPassed"  jdbcType="INTEGER"/> 
			 <result column="RECHARGE_PASSED"  property="rechargePassed"  jdbcType="INTEGER"/> 
			 <result column="MOBILE_APPROVED_TIME"  property="mobileApprovedTime"  jdbcType="TIMESTAMP" /> 
			 <result column="EMAIL_APPROVED_TIME"  property="emailApprovedTime" jdbcType="TIMESTAMP"  /> 
			 <result column="REALNAME_APPROVED_TIME"  property="realnameApprovedTime"  jdbcType="TIMESTAMP" /> 
			 <result column="VIP_APPROVED_TIME"  property="vipApprovedTime" jdbcType="TIMESTAMP" /> 
			 <result column="RECHARGE_TIME"  property="rechargeTime" jdbcType="TIMESTAMP"  /> 
			 <result column="INVITE_SUCCESS_TIME"  property="inviteSuccessTime"  jdbcType="TIMESTAMP" /> 
			 <result column="RECHARGE_MONEY"  property="totalInterest"  jdbcType="DECIMAL"   /> 
			 <result column="MONTH_INTEREST"  property="monthInterest"  jdbcType="DECIMAL"   /> 
			 
			 <result column="inviteSuccessCount"  property="recommendSuccessUserCount"  jdbcType="INTEGER"   /> 
			 <result column="MONTH"  property="month"  jdbcType="INTEGER"   /> 
			 <result column="ATHLETICS_AWARD"  property="athleticsAward"  jdbcType="DECIMAL"   /> 
			 <result column="ATHLETICS_ACTUAL_AWARD"  property="athleticsActualAward"  jdbcType="DECIMAL"   /> 
			 <result column="ATHLETICS_ADD_TIME"  property="athleticsAwardGrantDate"  jdbcType="TIMESTAMP"   /> 
			 <result column="DIRECTRECOMMEND_SHAREAWARD"  property="directRecommendShareAward"  jdbcType="DECIMAL"   /> 
			 <result column="INDIRECTRECOMMEND_SHAREAWARD"  property="indirectRecommendShareAward"  jdbcType="DECIMAL"   /> 
			 <result column="INTEREST_MONEY"  property="interestMoney"  jdbcType="DECIMAL"   /> 
			 <result column="INTEREST_ACTUAL_MONEY"  property="interestActualMoney"  jdbcType="DECIMAL"   />
			 <result column="INTEREST_REMARK"  property="interestRemark"  jdbcType="VARCHAR"   /> 
		     <result column="ATHLETICS_REMARK"  property="athleticsRemark"  jdbcType="VARCHAR"   />  
			 <result column="SHAREAWARD_GRANTDATE"  property="shareAwardGrantDate"  jdbcType="TIMESTAMP"   />
			 <result column="getInterest"  property="getInterest"  jdbcType="DECIMAL"   />
			 <result column="YEAR"  property="year"  jdbcType="VARCHAR"   /> 
             
             <result column="borrowId"  property="borrowId"  jdbcType="INTEGER" /> 
		  	 <result column="name"  property="borrowName"  jdbcType="VARCHAR"  />
		 	 <result column="interest"  property="interest"  jdbcType="DECIMAL"   /> 
		  	 <result column="interestManagerFree"  property="interestManagerFree"  jdbcType="DECIMAL"   /> 
		  	 <result column="TENDER_MONEY"  property="tenderMoney"  jdbcType="DECIMAL"   /> 
		  	 <result column="NORMAL_COLL"  property="normalColl"  jdbcType="DECIMAL"   /> 
		  	 <result column="FIRST_COLL"  property="firstColl"  jdbcType="DECIMAL"   /> 
		  	 <result column="FIX_COLL"  property="fixColl"  jdbcType="DECIMAL"   /> 
		  	 
	</resultMap>


  <!-- 推荐人数列表 -->
	  <select id="queryRecommendUserCountList"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendUserCountCnd"  resultMap="invetedUserResultMap">
	   select * from   ( select   
			(SELECT username from rocky_member rm where rm.ID=tt.USERID) USERNAME, 
			(SELECT sum(rr.MONEY) from rocky_rechargerecord rr where rr.USER_ID = tt.INVITED_USERID and rr.`STATUS` = 1) RECHARGE_MONEY, 
			(select SUM(tz.ACCOUNT) from (
					select USER_ID, ACCOUNT, ADDTIME
					from rocky_b_tenderrecord
					where (TENDER_TYPE = 2 or (TENDER_TYPE in (0,1) and PARENT_ID is null))
					and `STATUS` in (1,2)
					and ADDTIME >= convert(UNIX_TIMESTAMP('2014-12-01'), char)
					union all
					select USER_ID, ACCOUNT, unix_timestamp(ADD_TIME)
					from rocky_b_subscribe
					where `STATUS` = 3
					and ADD_TIME >= date('2014-12-01')
					UNION ALL
					select USER_ID, sum(ACCOUNT) ACCOUNT, unix_timestamp(ADDTIME) 
					from t_fix_tender_detail 
					where `STATUS` in (1,3) 				 
					and ADDTIME >= date('2014-12-01')
					group by USER_ID
				) tz where tz.USER_ID = tt.INVITED_USERID) TENDER_MONEY,
			(select IFNULL(SUM(REPAY_ACCOUNT),0) from rocky_b_collectionrecord
					where FIRST_BORROW_ID IS NULL and `STATUS`=0 and USER_ID=tt.INVITED_USERID) NORMAL_COLL,
			(select IFNULL(SUM(REPAY_ACCOUNT),0) from rocky_b_collectionrecord
					where FIRST_BORROW_ID IS NOT NULL and IS_FIRST_BORROW=1 and `STATUS`=0
					and USER_ID=tt.INVITED_USERID) FIRST_COLL,
			(select IFNULL(SUM(REPAY_ACCOUNT),0) from t_fix_collectionrecord where `STATUS`=0 
					and USER_ID=tt.INVITED_USERID) FIX_COLL,
			case 
			  	when INVITE_SUCCESS_TIME1 &lt; date('2015-07-10')
			  	then INVITE_SUCCESS_TIME1
			  	else INVITE_SUCCESS_TIME2
		  	end as INVITE_SUCCESS_TIME,
			tt.* from ( 
			select 
			USERID,INVITED_USERID, INVITED_USERNAME, if(AWARDMONEY = 0, null, AWARDMONEY) as AWARDMONEY, 
			from_unixtime(REGISTER_TIME, '%Y-%m-%d %H:%i:%S') as REGISTER_TIME, 
			MOBILE_PASSED, EMAIL_PASSED, REALNAME_PASSED, VIP_PASSED, 
			if(min(RECHARGE_TIME) is null, 0, 1) as RECHARGE_PASSED, 
			from_unixtime(MOBILE_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as MOBILE_APPROVED_TIME, 
			from_unixtime(EMAIL_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as EMAIL_APPROVED_TIME, 
			from_unixtime(REALNAME_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as REALNAME_APPROVED_TIME, 
			from_unixtime(VIP_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as VIP_APPROVED_TIME, 
			from_unixtime(min(RECHARGE_TIME), '%Y-%m-%d %H:%i:%S') as RECHARGE_TIME, 
			from_unixtime(min(TENDER_TIME), '%Y-%m-%d %H:%i:%S') as TENDER_TIME, 
			from_unixtime(greatest(MOBILE_APPROVED_TIME, REALNAME_APPROVED_TIME,  min(RECHARGE_TIME)), '%Y-%m-%d %H:%i:%S') as INVITE_SUCCESS_TIME1,
			from_unixtime(greatest(MOBILE_APPROVED_TIME, REALNAME_APPROVED_TIME,  min(TENDER_TIME)), '%Y-%m-%d %H:%i:%S') as INVITE_SUCCESS_TIME2			 
			from ( 
			select 
			m.INVITERID as USERID, 
			m.ID as INVITED_USERID, 
			m.USERNAME as INVITED_USERNAME, 
			m.AWARDMONEY as AWARDMONEY, 
			m.ADDTIME as REGISTER_TIME, 
			if(ma.PASSED = 1, ma.APPROTIME, null) as MOBILE_APPROVED_TIME, 
			if(ea.CHECKED = 1, ea.APPRTIME, null) as EMAIL_APPROVED_TIME, 
			if(ra.ISPASSED = 1, ra.APPROVETIME, null) as REALNAME_APPROVED_TIME, 
			if(va.PASSED = 1, va.APPROVETIME, null) as VIP_APPROVED_TIME, 
			ma.PASSED as MOBILE_PASSED, 
			ea.CHECKED as EMAIL_PASSED, 
			ra.ISPASSED as REALNAME_PASSED, 
			va.PASSED as VIP_PASSED, 
			@sumMoney := convert(if(@tmpId = m.ID, @sumMoney + rr.MONEY, rr.MONEY), decimal(20,2)) as RECHARGE_MONEY,  
			null as TENDER_MONEY,
			@rn := if(@tmpId = m.ID, @rn, 0), 
			@rechargeTime := if(@sumMoney >= 1000, rr.ADDTIME, null) as RECHARGE_TIME, 
			null as TENDER_TIME,
			@rn := if(@sumMoney >= 1000, @rn + 1, 0) as RN, 
			@tmpId := m.ID 
			from rocky_member m 
			left join rocky_email_appro ea on ea.USER_ID = m.ID 
			left join rocky_mobile_appro ma on ma.USER_ID = m.ID 
			left join rocky_realname_appro ra on ra.USER_ID = m.ID 
			left join rocky_vip_appro va on va.USER_ID = m.ID 
			left join rocky_rechargerecord rr on rr.USER_ID = m.ID and rr.`STATUS` = 1 and m.ADDTIME >= convert(1417363200, char) 
			inner join (select @rn := 0, @tmpId := 0, @sumMoney := 0, @rechargeTime := null) x 
			where m.INVITERID is not null			
			
			union all
		
		  	select
			m.INVITERID as USERID,
			m.ID as INVITED_USERID,
			m.USERNAME as INVITED_USERNAME,
			m.AWARDMONEY as AWARDMONEY,
			m.ADDTIME as REGISTER_TIME,
			if(ma.PASSED = 1, ma.APPROTIME, null) as MOBILE_APPROVED_TIME,
			if(ea.CHECKED = 1, ea.APPRTIME, null) as EMAIL_APPROVED_TIME,
			if(ra.ISPASSED = 1, ra.APPROVETIME, null) as REALNAME_APPROVED_TIME,
			if(va.PASSED = 1, va.APPROVETIME, null) as VIP_APPROVED_TIME, 
			ma.PASSED as MOBILE_PASSED,
			ea.CHECKED as EMAIL_PASSED,
			ra.ISPASSED as REALNAME_PASSED,
			va.PASSED as VIP_PASSED,
			null as RECHARGE_MONEY,
			@sumMoney2 := convert(if(@tmpId2 = m.ID, @sumMoney2 + tz.ACCOUNT, tz.ACCOUNT), decimal(20,2)) as TENDER_MONEY,
			@rn2 := if(@tmpId2 = m.ID, @rn2, 0),
			null as RECHARGE_TIME,
			@tenderTime2 := if(@sumMoney2 >= 1000, tz.ADDTIME, null) as TENDER_TIME,
			@rn2 := if(@sumMoney2 >= 1000, @rn2 + 1, 0) as RN,
			@tmpId2 := m.ID
			from rocky_member m
			left join rocky_email_appro ea on ea.USER_ID = m.ID and ea.CHECKED = 1
			left join rocky_mobile_appro ma on ma.USER_ID = m.ID and ma.PASSED = 1
			left join rocky_realname_appro ra on ra.USER_ID = m.ID and ra.ISPASSED = 1
			left join rocky_vip_appro va on va.USER_ID = m.ID 
			left join (
				select * from (
					select USER_ID, ACCOUNT, ADDTIME
					from rocky_b_tenderrecord
					where (TENDER_TYPE = 2 or (TENDER_TYPE in (0,1) and PARENT_ID is null))
					and `STATUS` in (1,2)
					and ADDTIME >= convert(UNIX_TIMESTAMP('2014-12-01'), char)
					union all
					select USER_ID, ACCOUNT, unix_timestamp(ADD_TIME)
					from rocky_b_subscribe
					where `STATUS` = 3
					and ADD_TIME >= date('2014-12-01')
					UNION ALL
					select USER_ID, sum(ACCOUNT) ACCOUNT, unix_timestamp(ADDTIME) 
					from t_fix_tender_detail 
					where `STATUS` in (1,3) 				 
					and ADDTIME >= date('2014-12-01')
					group by USER_ID
				) _tz order by ADDTIME
			) tz on tz.USER_ID = m.ID
			inner join (select @rn2 := 0, @tmpId2 := 0, @sumMoney2 := 0, @tenderTime2 := null) a
			where m.INVITERID is not null
			
			) t where RN in (0, 1) 
			group by INVITED_USERID 
			) tt ) ttt
	       <include refid="RecommendUserCountWhereSql"/>
	  </select>
	  
	  
	  
	  <select id="queryCountRecommendUserCountList"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendUserCountCnd"  resultType="java.lang.Integer">
		   select count(1) from (
		   select   
			(SELECT username from rocky_member rm where rm.ID=tt.USERID) USERNAME, 
			(SELECT sum(rr.MONEY) from rocky_rechargerecord rr where rr.USER_ID = tt.INVITED_USERID and rr.`STATUS` = 1) RECHARGE_MONEY, 
			(select SUM(tz.ACCOUNT) from (
					select USER_ID, ACCOUNT, ADDTIME
					from rocky_b_tenderrecord
					where (TENDER_TYPE = 2 or (TENDER_TYPE in (0,1) and PARENT_ID is null))
					and `STATUS` in (1,2)
					and ADDTIME >= convert(UNIX_TIMESTAMP('2014-12-01'), char)
					union all
					select USER_ID, ACCOUNT, unix_timestamp(ADD_TIME)
					from rocky_b_subscribe
					where `STATUS` = 3
					and ADD_TIME >= date('2014-12-01')
					UNION ALL
					select USER_ID, sum(ACCOUNT) ACCOUNT, unix_timestamp(ADDTIME) 
					from t_fix_tender_detail 
					where `STATUS` in (1,3) 				 
					and ADDTIME >= date('2014-12-01')
					group by USER_ID
				) tz where tz.USER_ID = tt.INVITED_USERID) TENDER_MONEY,
			case 
			  	when INVITE_SUCCESS_TIME1 &lt; date('2015-07-10')
			  	then INVITE_SUCCESS_TIME1
			  	else INVITE_SUCCESS_TIME2
		  	end as INVITE_SUCCESS_TIME,
			tt.* from ( 
			select 
			USERID,INVITED_USERID, INVITED_USERNAME, if(AWARDMONEY = 0, null, AWARDMONEY) as AWARDMONEY, 
			from_unixtime(REGISTER_TIME, '%Y-%m-%d %H:%i:%S') as REGISTER_TIME, 
			MOBILE_PASSED, EMAIL_PASSED, REALNAME_PASSED, VIP_PASSED, 
			if(min(RECHARGE_TIME) is null, 0, 1) as RECHARGE_PASSED, 
			from_unixtime(MOBILE_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as MOBILE_APPROVED_TIME, 
			from_unixtime(EMAIL_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as EMAIL_APPROVED_TIME, 
			from_unixtime(REALNAME_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as REALNAME_APPROVED_TIME, 
			from_unixtime(VIP_APPROVED_TIME, '%Y-%m-%d %H:%i:%S') as VIP_APPROVED_TIME, 
			from_unixtime(min(RECHARGE_TIME), '%Y-%m-%d %H:%i:%S') as RECHARGE_TIME, 
			from_unixtime(min(TENDER_TIME), '%Y-%m-%d %H:%i:%S') as TENDER_TIME, 
			from_unixtime(greatest(MOBILE_APPROVED_TIME, REALNAME_APPROVED_TIME,  min(RECHARGE_TIME)), '%Y-%m-%d %H:%i:%S') as INVITE_SUCCESS_TIME1,
			from_unixtime(greatest(MOBILE_APPROVED_TIME, REALNAME_APPROVED_TIME,  min(TENDER_TIME)), '%Y-%m-%d %H:%i:%S') as INVITE_SUCCESS_TIME2			 
			from ( 
			select 
			m.INVITERID as USERID, 
			m.ID as INVITED_USERID, 
			m.USERNAME as INVITED_USERNAME, 
			m.AWARDMONEY as AWARDMONEY, 
			m.ADDTIME as REGISTER_TIME, 
			if(ma.PASSED = 1, ma.APPROTIME, null) as MOBILE_APPROVED_TIME, 
			if(ea.CHECKED = 1, ea.APPRTIME, null) as EMAIL_APPROVED_TIME, 
			if(ra.ISPASSED = 1, ra.APPROVETIME, null) as REALNAME_APPROVED_TIME, 
			if(va.PASSED = 1, va.APPROVETIME, null) as VIP_APPROVED_TIME, 
			ma.PASSED as MOBILE_PASSED, 
			ea.CHECKED as EMAIL_PASSED, 
			ra.ISPASSED as REALNAME_PASSED, 
			va.PASSED as VIP_PASSED, 
			@sumMoney := convert(if(@tmpId = m.ID, @sumMoney + rr.MONEY, rr.MONEY), decimal(20,2)) as RECHARGE_MONEY,  
			null as TENDER_MONEY,
			@rn := if(@tmpId = m.ID, @rn, 0), 
			@rechargeTime := if(@sumMoney >= 1000, rr.ADDTIME, null) as RECHARGE_TIME, 
			null as TENDER_TIME,
			@rn := if(@sumMoney >= 1000, @rn + 1, 0) as RN, 
			@tmpId := m.ID 
			from rocky_member m 
			left join rocky_email_appro ea on ea.USER_ID = m.ID 
			left join rocky_mobile_appro ma on ma.USER_ID = m.ID 
			left join rocky_realname_appro ra on ra.USER_ID = m.ID 
			left join rocky_vip_appro va on va.USER_ID = m.ID 
			left join rocky_rechargerecord rr on rr.USER_ID = m.ID and rr.`STATUS` = 1 and m.ADDTIME >= convert(1417363200, char) 
			inner join (select @rn := 0, @tmpId := 0, @sumMoney := 0, @rechargeTime := null) x 
			where m.INVITERID is not null			
			
			union all
		
		  	select
			m.INVITERID as USERID,
			m.ID as INVITED_USERID,
			m.USERNAME as INVITED_USERNAME,
			m.AWARDMONEY as AWARDMONEY,
			m.ADDTIME as REGISTER_TIME,
			if(ma.PASSED = 1, ma.APPROTIME, null) as MOBILE_APPROVED_TIME,
			if(ea.CHECKED = 1, ea.APPRTIME, null) as EMAIL_APPROVED_TIME,
			if(ra.ISPASSED = 1, ra.APPROVETIME, null) as REALNAME_APPROVED_TIME,
			if(va.PASSED = 1, va.APPROVETIME, null) as VIP_APPROVED_TIME, 
			ma.PASSED as MOBILE_PASSED,
			ea.CHECKED as EMAIL_PASSED,
			ra.ISPASSED as REALNAME_PASSED,
			va.PASSED as VIP_PASSED,
			null as RECHARGE_MONEY,
			@sumMoney2 := convert(if(@tmpId2 = m.ID, @sumMoney2 + tz.ACCOUNT, tz.ACCOUNT), decimal(20,2)) as TENDER_MONEY,
			@rn2 := if(@tmpId2 = m.ID, @rn2, 0),
			null as RECHARGE_TIME,
			@tenderTime2 := if(@sumMoney2 >= 1000, tz.ADDTIME, null) as TENDER_TIME,
			@rn2 := if(@sumMoney2 >= 1000, @rn2 + 1, 0) as RN,
			@tmpId2 := m.ID
			from rocky_member m
			left join rocky_email_appro ea on ea.USER_ID = m.ID and ea.CHECKED = 1
			left join rocky_mobile_appro ma on ma.USER_ID = m.ID and ma.PASSED = 1
			left join rocky_realname_appro ra on ra.USER_ID = m.ID and ra.ISPASSED = 1
			left join rocky_vip_appro va on va.USER_ID = m.ID 
			left join (
				select * from (
					select USER_ID, ACCOUNT, ADDTIME
					from rocky_b_tenderrecord
					where (TENDER_TYPE = 2 or (TENDER_TYPE in (0,1) and PARENT_ID is null))
					and `STATUS` in (1,2)
					and ADDTIME >= convert(UNIX_TIMESTAMP('2014-12-01'), char)
					union all
					select USER_ID, ACCOUNT, unix_timestamp(ADD_TIME)
					from rocky_b_subscribe
					where `STATUS` = 3
					and ADD_TIME >= date('2014-12-01')
					UNION ALL
					select USER_ID, sum(ACCOUNT) ACCOUNT, unix_timestamp(ADDTIME) 
					from t_fix_tender_detail 
					where `STATUS` in (1,3) 				 
					and ADDTIME >= date('2014-12-01')
					group by USER_ID
				) _tz order by ADDTIME
			) tz on tz.USER_ID = m.ID
			inner join (select @rn2 := 0, @tmpId2 := 0, @sumMoney2 := 0, @tenderTime2 := null) a
			where m.INVITERID is not null
			
			) t where RN in (0, 1) 
			group by INVITED_USERID 
			) tt 
		   ) ttt 
		  <include refid="RecommendUserCountWhereSql"/>
	  </select>
	  
	  <sql id="RecommendUserCountWhereSql">
	      <where>
	            1=1  
                <if test="recommendUserCountCnd.userName != null and '' !=recommendUserCountCnd.userName ">
                 and USERNAME  like  concat(#{recommendUserCountCnd.userName},'%')
                </if>
                 <if test="recommendUserCountCnd.invitedUsername != null and '' !=recommendUserCountCnd.invitedUsername ">
                  and  INVITED_USERNAME  like  concat(#{recommendUserCountCnd.invitedUsername},'%')
                </if>
                <if test="recommendUserCountCnd.isRecommendSuccess != null and '' !=recommendUserCountCnd.isRecommendSuccess  ">
	                  <if test="recommendUserCountCnd.isRecommendSuccess==0">
	                 and   INVITE_SUCCESS_TIME is  null
	                  </if>
	                  <if test="recommendUserCountCnd.isRecommendSuccess==1">
	                   and INVITE_SUCCESS_TIME is not  null
	                  </if>
                </if>
                <if test="recommendUserCountCnd.invitedRegistBeginTime!=null" > and REGISTER_TIME &gt; #{recommendUserCountCnd.invitedRegistBeginTime}  </if>
                <if test="recommendUserCountCnd.invitedRegistEndTime!=null" >  and REGISTER_TIME  &lt;   DATE_FORMAT(DATE_ADD( #{recommendUserCountCnd.invitedRegistEndTime} , INTERVAL 1  DAY ) ,'%Y-%m-%d %H:%i:%s') </if>
                <if test="recommendUserCountCnd.invitedSuccessBeginTime!=null" > and INVITE_SUCCESS_TIME &gt; #{recommendUserCountCnd.invitedSuccessBeginTime}  </if>
                <if test="recommendUserCountCnd.invitedSuccessEndTime!=null" >  and INVITE_SUCCESS_TIME  &lt;  DATE_FORMAT(DATE_ADD( #{recommendUserCountCnd.invitedSuccessEndTime} , INTERVAL 1  DAY ) ,'%Y-%m-%d %H:%i:%s')  </if>
                 
	      </where>
	  </sql>
	  
	  
	  <!--    推荐奖励列表  -->
		  <select id="queryRecommendAwardList"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendAwardCnd"  resultMap="invetedUserResultMap">
			select ID,USERID,  `MONTH`,  USERNAME,YEAR(DATE_SUB(UPDATE_TIME, INTERVAL 1 MONTH)) AS YEAR,
 			max(if(TYPE = 1, RANK, null)) RANK, <!-- 推荐人数排名 -->
			sum(if(TYPE = 1, NUM, null)) inviteSuccessCount,    <!-- 统计成功人数 -->
			sum(if(TYPE = 1, MONEY, null)) ATHLETICS_AWARD, <!-- 应发竞技奖 -->
			sum(if(TYPE = 1, ACTUAL_MONEY, null)) ATHLETICS_ACTUAL_AWARD, <!-- 实际发放 --> 
			sum(if(TYPE = 1, UPDATE_TIME, null))  ATHLETICS_ADD_TIME, <!-- 竞技奖发放时间 -->
			sum(if(TYPE = 4, DIRECT_MONEY, null)) DIRECTRECOMMEND_SHAREAWARD,  <!-- 直接共享奖  -->
			<!-- sum(if(TYPE = 4, INDIRECT_MONEY, null)) INDIRECTRECOMMEND_SHAREAWARD,  间接共享奖 -->
			IF( DATE_FORMAT( sum(if(TYPE = 4, UPDATE_TIME, null)), '%Y') &gt; '2015',null,sum(if(TYPE = 4, INDIRECT_MONEY, null))) INDIRECTRECOMMEND_SHAREAWARD, <!-- 间接共享奖 -->
			sum(if(TYPE = 4, MONEY, null)) INTEREST_MONEY, <!-- 应发共享奖 -->
			sum(if(TYPE = 4, ACTUAL_MONEY, null)) INTEREST_ACTUAL_MONEY, <!-- 实际发放共享奖 --> 
			sum(if(TYPE = 4, UPDATE_TIME, null)) SHAREAWARD_GRANTDATE <!-- 发放日期 -->
			from t_invite_reward_issue 
			where TYPE in (1, 4) 
			<if test="recommendAwardCnd.month!=0">
				and `MONTH` = #{recommendAwardCnd.month}  
			</if>
			<if test="recommendAwardCnd.userName != null and '' !=recommendAwardCnd.userName ">
            	and USERNAME  like  concat(#{recommendAwardCnd.userName},'%')
            </if>
			<if test="recommendAwardCnd.year!=0 ">
            	and date_format(UPDATE_TIME,'%Y-%m') =  #{recommendAwardCnd.tjDate} 
            </if>
			group by USERID, `MONTH`
			order by if(`MONTH` = 12, 0, `MONTH`), if(isnull(RANK),1,0), RANK
	   </select>
	  
	    <select id="queryCountRecommendAwardList"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendAwardCnd"   resultType="java.lang.Integer">
				   select count(1) from  (
					   select   1   from t_invite_reward_issue 
							where TYPE in (1, 4) 
							<if test="recommendAwardCnd.month!=0">
							and `MONTH` = #{recommendAwardCnd.month}  
						    </if>
							<if test="recommendAwardCnd.userName != null and '' !=recommendAwardCnd.userName ">
			                       and USERNAME  like  concat(#{recommendAwardCnd.userName},'%')
			                </if>
			                <if test="recommendAwardCnd.year!=0 ">
            	                  and date_format(UPDATE_TIME,'%Y-%m') =  #{recommendAwardCnd.tjDate} 
                            </if>
							group by USERID, `MONTH` 
				   ) t    
	  </select>
	   
	 <sql id="RecommendAwardWhereSql">
	      <where>
	            1=1 
                <if test="recommendAwardCnd.userName != null and '' !=recommendAwardCnd.userName ">
                       and d.USERNAME  like  concat(#{recommendAwardCnd.userName},'%')
                </if>
                <if test="recommendAwardCnd.month!=0" > and month = #{recommendAwardCnd.month} </if>
	      </where>
	  </sql>
	  
	  <!-- 推荐共享奖 明细  -->
	    <select id="queryInviteUserListByUser"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendAwardCnd"  resultMap="invetedUserResultMap">
			   SELECT  tt.INVITED_USERID,tt.INVITED_USERNAME,tt.MONTH_INTEREST,  ROUND((tt.MONTH_INTEREST * ratio), 2) as getInterest FROM 
					(select INVITED_USERID,INVITED_USERNAME,ratio,SUM(MONTH_INTEREST) MONTH_INTEREST from (
							select ii.INVITED_USERID, ii.INVITED_USERNAME, convert(case ii.type when 0 then 0.03 when 1 then 0.01 end, decimal(3,2)) as ratio,
							sum((bc.REPAY_YESACCOUNT - bc.CAPITAL) - (case b.BORROWTYPE when 3 then 0 else ROUND((bc.REPAY_YESACCOUNT - bc.CAPITAL) * bt.RATIO, 2) end)) MONTH_INTEREST  
							from t_invite_detail ii, rocky_b_collectionrecord bc, rocky_b_tenderrecord bt , rocky_borrow b
							where ii.INVITED_USERID = bt.USER_ID 
							and ii.USERID = #{recommendAwardCnd.userId}
							and ii.type= #{recommendAwardCnd.type}
							and ii.MONTH = #{recommendAwardCnd.month}
							and bc.TENDER_ID = bt.ID 
							and b.ID = bt.BORROW_ID
							and bt.`STATUS` in (1,2) 
							and bc.`STATUS` in (1,2,3) 
							and least( ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME) ) >=date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract( day from #{recommendAwardCnd.tjDate})-1 day),interval 0 month)
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) &lt; date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract(day from #{recommendAwardCnd.tjDate})-1 day),interval -1 month)
							group by bc.USER_ID
							
							UNION ALL

							select fii.INVITED_USERID, fii.INVITED_USERNAME, convert(case fii.type when 0 then 0.03 when 1 then 0.01 end, decimal(3,2)) as ratio,
							sum(fbc.REPAY_YESACCOUNT - fbc.CAPITAL) MONTH_INTEREST  
							from t_invite_detail fii, t_fix_collectionrecord fbc, t_fix_tender_real fbt, t_fix_borrow fb
							where fii.INVITED_USERID = fbt.USER_ID 
							and fii.USERID = #{recommendAwardCnd.userId}
							and fii.type= #{recommendAwardCnd.type}
							and fii.MONTH = #{recommendAwardCnd.month}
							and fbc.FIX_TENDER_REAL_ID = fbt.ID
							and fbt.FIX_BORROW_ID = fb.ID
							and fbt.`STATUS` = 1
							and fbc.`STATUS` = 1
							and least(ifnull(fbc.ADVANCETIME, fbc.REPAY_YESTIME), ifnull(fbc.REPAY_YESTIME, fbc.ADVANCETIME) ) >= date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract( day from #{recommendAwardCnd.tjDate})-1 day),interval 0 month)
							and least(ifnull(fbc.ADVANCETIME, fbc.REPAY_YESTIME), ifnull(fbc.REPAY_YESTIME, fbc.ADVANCETIME)) &lt; date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract(day from #{recommendAwardCnd.tjDate})-1 day),interval -1 month)
							group by fbc.USER_ID
					 ) t1 group by t1.INVITED_USERID
			   ) tt
			 
	    </select>
	    
	   <select id="queryCountInviteUserListByUser"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendAwardCnd"   resultType="java.lang.Integer">
		    	SELECT  count(1) FROM 
					 (select INVITED_USERID from (							
							select ii.INVITED_USERID  
							from t_invite_detail ii, rocky_b_collectionrecord bc, rocky_b_tenderrecord bt , rocky_borrow b
							where ii.INVITED_USERID = bt.USER_ID 
							and ii.USERID = #{recommendAwardCnd.userId}
							and ii.type= #{recommendAwardCnd.type}
							and ii.MONTH = #{recommendAwardCnd.month}
							and bc.TENDER_ID = bt.ID 
							and b.ID = bt.BORROW_ID
							and bt.`STATUS` in (1,2) 
							and bc.`STATUS` in (1,2,3) 
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) >=date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract( day from #{recommendAwardCnd.tjDate})-1 day),interval 0 month)
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) &lt; date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract(day from #{recommendAwardCnd.tjDate})-1 day),interval -1 month)
							group by bc.USER_ID
							
							UNION ALL

							select fii.INVITED_USERID  
							from t_invite_detail fii, t_fix_collectionrecord fbc, t_fix_tender_real fbt, t_fix_borrow fb
							where fii.INVITED_USERID = fbt.USER_ID 
							and fii.USERID = #{recommendAwardCnd.userId}
							and fii.type= #{recommendAwardCnd.type}
							and fii.MONTH = #{recommendAwardCnd.month}
							and fbc.FIX_TENDER_REAL_ID = fbt.ID
							and fbt.FIX_BORROW_ID = fb.ID
							and fbt.`STATUS` = 1
							and fbc.`STATUS` = 1
							and least(ifnull(fbc.ADVANCETIME, fbc.REPAY_YESTIME), ifnull(fbc.REPAY_YESTIME, fbc.ADVANCETIME) ) >= date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract( day from #{recommendAwardCnd.tjDate})-1 day),interval 0 month)
							and least(ifnull(fbc.ADVANCETIME, fbc.REPAY_YESTIME), ifnull(fbc.REPAY_YESTIME, fbc.ADVANCETIME)) &lt; date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract(day from #{recommendAwardCnd.tjDate})-1 day),interval -1 month)
							group by fbc.USER_ID
					) t1 group by t1.INVITED_USERID
				) tt
	    </select>
	     
	  <sql id="InviteUserListByUserWhere">
	     WHERE 1 = 1 and d.USERNAME=#{recommendAwardCnd.userName} and d.MONTH= #{recommendAwardCnd.month}
	     </sql>
	     
	   <!--  收益明细  -->
      <select id="queryUsercollectionListByInviteUser"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendAwardCnd"   resultMap="invetedUserResultMap">
		     select ii.INVITED_USERID, ii.INVITED_USERNAME,b.id borrowId, b.`NAME`, 
		                    (bc.REPAY_YESACCOUNT - bc.CAPITAL) - (case b.BORROWTYPE when 3 then 0 else ROUND((bc.REPAY_YESACCOUNT - bc.CAPITAL) * bt.RATIO, 2) end)  AS interest,
							(case b.BORROWTYPE when 3 then 0 else ROUND((bc.REPAY_YESACCOUNT - bc.CAPITAL) * bt.RATIO, 2) end)  AS interestManagerFree
							from t_invite_detail ii, rocky_b_collectionrecord bc, rocky_b_tenderrecord bt, rocky_borrow b 
							where ii.INVITED_USERID = bt.USER_ID 
							and ii.USERID = #{recommendAwardCnd.userId}
							and ii.INVITED_USERID = #{recommendAwardCnd.invitedUserId}   
							and ii.MONTH = #{recommendAwardCnd.month}
							and bc.TENDER_ID = bt.ID 
							and bt.BORROW_ID = b.ID 
							and bt.`STATUS` in (1,2) 
							and bc.`STATUS` in (1,2,3) 
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) >= date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract( day from #{recommendAwardCnd.tjDate})-1 day),interval 0 month)
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) &lt; date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract(day from #{recommendAwardCnd.tjDate})-1 day),interval -1 month)
	  </select>
	  
	  
	   <select id="queryCountUsercollectionListByInviteUser"   parameterType="com.cxdai.console.statistics.customer.vo.RecommendAwardCnd"   resultType="java.lang.Integer">
		        select  count(1)
							from t_invite_detail ii, rocky_b_collectionrecord bc, rocky_b_tenderrecord bt, rocky_borrow b 
							where ii.INVITED_USERID = bt.USER_ID 
							and ii.USERID = #{recommendAwardCnd.userId}
							and ii.INVITED_USERID = #{recommendAwardCnd.invitedUserId}   
							and ii.MONTH = #{recommendAwardCnd.month}
							and bc.TENDER_ID = bt.ID 
							and bt.BORROW_ID = b.ID 
							and bt.`STATUS` in (1,2) 
							and bc.`STATUS` in (1,2,3) 
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) >= date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract( day from #{recommendAwardCnd.tjDate})-1 day),interval 0 month)
							and least(ifnull(bc.ADVANCETIME, from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S')), ifnull(from_unixtime(bc.REPAY_YESTIME, '%Y-%m-%d %H:%i:%S'), bc.ADVANCETIME)) &lt; date_sub(date_sub(date_format(#{recommendAwardCnd.tjDate},'%Y-%m-%d'),interval extract(day from #{recommendAwardCnd.tjDate})-1 day),interval -1 month)
	  </select>
	  
 
	  
	   
	  <select id="getRecharge"      resultMap="invetedUserResultMap">
		SELECT  SUM(IF(TYPE=4 , DIRECT_MONEY,NULL)  )  directRecommendShareAward,SUM( IF(TYPE=4 AND UPDATE_TIME &lt; '2016-01-01' , INDIRECT_MONEY,NULL) ) indirectRecommendShareAward ,SUM( IF(TYPE=1 AND UPDATE_TIME &lt; '2016-01-01' ,NUM,NULL) )  inviteSuccessCount  ,
		  sum( IF(TYPE IN (1,2,3) AND UPDATE_TIME &lt; '2016-01-01' ,ACTUAL_MONEY,NULL))   athleticsAward   FROM   t_invite_reward_issue 
	  </select>
	  
	  <select id="queryDetailInviteUserById" parameterType="java.lang.Integer" resultMap="invetedUserResultMap" >
		select
			t.ID,t.USERID,t.USERNAME,t.TYPE,t.`MONTH`
		from t_invite_reward_issue t
		where t.id = #{id}
  	</select>
	   
</mapper>