<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	<description>Spring-Core</description>

	<!-- 使用annotation自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.cxdai.console.**.service">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 采用alibaba的druid做为数据源 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/jdbc.properties" />
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 driver、url、user、password -->
		<property name="driverClassName" value="${mysql.jdbc.driverClassName}" />
		<property name="url" value="${mysql.jdbc.url}" />
		<property name="username" value="${mysql.jdbc.username}" />
		<property name="password" value="${mysql.jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="20" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="300" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="10000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- <property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="stat,log4j" /> -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
			</list>
		</property>

		<property name="removeAbandoned" value="true" /><!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /><!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /><!-- 关闭abanded连接时输出错误日志 -->
	</bean>

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->
		<property name="statementCreateAfterLogEnabled" value="false" />
		<property name="statementPrepareAfterLogEnabled" value="false" />
		<property name="statementPrepareCallAfterLogEnabled" value="false" />
		<property name="statementCloseAfterLogEnabled" value="false" />
		<property name="statementParameterClearLogEnable" value="false" />
	</bean>

	<!-- 配置mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">
			<array>
				<bean class="com.cxdai.console.common.page.interceptor.PaginationInterceptor">
					<property name="dialect" value="MySQL" />
				</bean>
			</array>
		</property>
	</bean>
	<!-- mybatis映射XML文件，注入所有的mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cxdai.console.**.mapper" />
	</bean>

	<!-- 事务管理 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
	<!-- 通过spring初始化的函数 获取系统配置文件内容 -->
	<bean id="propertiesUtil" class="com.cxdai.console.util.PropertiesUtil" init-method="load">
		<property name="fileNames">
			<array>
				<value>system.properties</value>
                <value>custody.properties</value>
			</array>
		</property>
	</bean>

	<!-- init data -->
	<bean id="dictionary" class="com.cxdai.console.common.Dictionary" />

	<!-- freemarker 配置 -->
	<bean class="com.cxdai.console.freemarker.BaseFreemarkerService" />
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/template/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
			</props>
		</property>
	</bean>	
	<bean name="lifeBean" class="com.cxdai.console.util.LifeCycleBean"></bean>
</beans>